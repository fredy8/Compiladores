
PROGRAM ::= (VAR_DECLR | FUNCTION | CLASS)*

VAR_DECLR ::= TYPE id ARR? (',' id ARR?)* ';'

ARR ::= '[' cte_int ']'

FUNCTION ::= RETURN_TYPE id '(' PARAMETERS ')' BLOCK

PARAMETERS ::= (TYPE ID ARR? (',' TYPE ID ARR?)*)?

BLOCK ::= '{' STATEMENT* '}'

STATEMENT ::= (VAR_DECLR | EXPR ';' | FOR | WHILE | DO_WHILE | IF)

FOR ::= 'for' '(' ASSIGN ';' EXPR ';' ASSIGN ')' BLOCK

WHILE ::= 'while' '(' EXPR ')' BLOCK

DO_WHILE ::= 'do' BLOCK 'while' '(' EXPR ')' ';'

IF ::= 'if' '(' EXPR ')' BLOCK ('else' BLOCK)?

RETURN_TYPE ::= 'void' | TYPE

TYPE ::= 'int' | 'float' | 'string' | 'char' | id

CLASS ::= 'class' id '{' (VAR_DECLR | FUNCTION)* '}'

EXPR ::= (ASSIGN | FN_CALL | ARR_ACCESS | OBJ_FN_CALL | LITERAL | OPERATION | '(' EXPR ')' | id)

ARR_ACCESS ::= id '[' EXPR ']'

ASSIGN ::= id '=' EXPR

OPERATION ::= (UN_OPERATOR EXPR) | (EXPR BIN_OPERATOR EXPR)

BIN_OPERATOR ::= '+' | '-' | '/' | '*' | '%' | '<' | '<=' | '==' | '>=' | '>' | '&&' | '||'

UN_OPERATOR ::= '!'

FN_CALL ::= id '(' (EXPR (',' EXPR)*)? ')'

OBJ_FN_CALL ::= EXPR '.' FN_CALL

LITERAL ::= cte_int | cte_float | cte_string | cte_char
